# -*- coding: utf-8 -*-
"""Copy of [Clustering] Submission Akhir BMLP_Your Name (Updated).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YRL6Nt-ADCi_1cIYe-95T9XRE-qxm7Qw
"""

# **1. Perkenalan Dataset**
"""
**Sumber Dataset**:  
   https://www.kaggle.com/datasets/ulrikthygepedersen/online-retail-dataset

- Jumlah Baris: >500,000 baris (melebihi minimal 1000).
- Tipe Data: Mengandung data kategorikal (misalnya, 'Country', 'Description') dan numerikal (misalnya, 'Quantity', 'UnitPrice').
- Deskripsi: Berisi transaksi ritel online dengan informasi seperti jumlah barang, harga, dan pelanggan.
"""

# **2. Import Library**
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from yellowbrick.cluster import KElbowVisualizer
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
from sklearn.preprocessing import StandardScaler
from sklearn.feature_selection import SelectKBest, f_classif
import numpy as np

# **3. Memuat Dataset**
df = pd.read_csv('https://raw.githubusercontent.com/Sidqiamn/analisisdatadicoding/refs/heads/master/online_retail.csv')

# **4. Exploratory Data Analysis (EDA)**
df.head()
df.sample(5)
df.info()
df.isna().sum()
print("Jumlah duplikasi: ", df.duplicated().sum())
df.describe()
df[df.UnitPrice == df.UnitPrice.min()]

# Analisis dan visualisasi
df['TotalSpend'] = df['Quantity'] * df['UnitPrice']
correlation_matrix = df[['Quantity', 'UnitPrice', 'TotalSpend']].corr()
print(correlation_matrix)

print(df[['Quantity', 'UnitPrice', 'TotalSpend']].describe())

plt.figure(figsize=(15, 5))
plt.subplot(1, 3, 1)
sns.histplot(df['Quantity'], bins=50, kde=True)
plt.title('Distribusi Quantity')
plt.xlabel('Quantity')
plt.ylabel('Frekuensi')

plt.subplot(1, 3, 2)
sns.histplot(df['UnitPrice'], bins=50, kde=True)
plt.title('Distribusi UnitPrice')
plt.xlabel('UnitPrice')

plt.subplot(1, 3, 3)
sns.histplot(df['TotalSpend'], bins=50, kde=True)
plt.title('Distribusi TotalSpend')
plt.xlabel('TotalSpend')

plt.tight_layout()
plt.show()

plt.figure(figsize=(15, 5))
plt.subplot(1, 3, 1)
sns.boxplot(y=df['Quantity'])
plt.title('Boxplot Quantity')

plt.subplot(1, 3, 2)
sns.boxplot(y=df['UnitPrice'])
plt.title('Boxplot UnitPrice')

plt.subplot(1, 3, 3)
sns.boxplot(y=df['TotalSpend'])
plt.title('Boxplot TotalSpend')

plt.tight_layout()
plt.show()

# Diagram Batang untuk Country (variabel kategorikal)
plt.figure(figsize=(12, 6))
top_countries = df['Country'].value_counts().head(10)
sns.barplot(x=top_countries.index, y=top_countries.values)
plt.title('Distribusi Transaksi per Negara (Top 10)')
plt.xlabel('Negara')
plt.ylabel('Jumlah Transaksi')
plt.xticks(rotation=45)
plt.show()

# **5. Data Preprocessing**
# Membersihkan missing value
df[df.Description.isna()]
df.Description.value_counts()
df['Description'].fillna('Unknown Product', inplace=True)

df[df.CustomerID.isna()]
df.CustomerID.value_counts()
df = df.dropna(subset=['CustomerID'])
df.isna().sum()

# Membersihkan duplikat
df.drop_duplicates(inplace=True)
print("Jumlah duplikasi: ", df.duplicated().sum())

# Memperbaiki tipe data
df.info()
df["InvoiceDate"] = pd.to_datetime(df["InvoiceDate"])
df.info()

# Menangani inaccurate value
df[(df['UnitPrice'] > 0)]
df.describe()
df.sample(5)

plt.figure(figsize=(15, 5))
plt.subplot(1, 3, 1)
sns.histplot(df['Quantity'], bins=50, kde=True)
plt.title('Distribusi Quantity')
plt.xlabel('Quantity')
plt.ylabel('Frekuensi')

plt.subplot(1, 3, 2)
sns.histplot(df['UnitPrice'], bins=50, kde=True)
plt.title('Distribusi UnitPrice')
plt.xlabel('UnitPrice')

plt.subplot(1, 3, 3)
sns.histplot(df['TotalSpend'], bins=50, kde=True)
plt.title('Distribusi TotalSpend')
plt.xlabel('TotalSpend')

plt.tight_layout()
plt.show()

# Menangani outlier
df = df[(df['UnitPrice'] > 0) & (df['Quantity'] >= -1000) & (df['Quantity'] <= 1000)]
print("\nStatistik Setelah Filter:")
print(df.describe())

# Membuat fitur tambahan untuk clustering (minimal 5 fitur)
df['Month'] = df['InvoiceDate'].dt.month  # Numerikal
df['Hour'] = df['InvoiceDate'].dt.hour    # Numerikal

# Aggregasi data per pelanggan dengan 5+ fitur
customer_data = df.groupby('CustomerID').agg({
    'TotalSpend': 'sum',           # Numerikal 1: Total pengeluaran
    'Quantity': 'mean',           # Numerikal 2: Rata-rata jumlah barang
    'UnitPrice': 'mean',          # Numerikal 3: Rata-rata harga per unit
    'Month': 'mean',              # Numerikal 4: Rata-rata bulan pembelian
    'Country': 'nunique',         # Numerikal dari kategorikal 5: Jumlah negara unik
    'Description': lambda x: x.nunique()  # Numerikal dari kategorikal 6: Jumlah produk unik
}).reset_index()

# Rename kolom
customer_data.columns = ['CustomerID', 'TotalSpend', 'AvgQuantity', 
                        'AvgUnitPrice', 'AvgMonth', 'NumCountries', 'NumProducts']

# **6. Pembangunan Model Clustering**

# a. Normalisasi data
scaler = StandardScaler()
features = ['TotalSpend', 'AvgQuantity', 'AvgUnitPrice', 'AvgMonth', 'NumCountries', 'NumProducts']
X = scaler.fit_transform(customer_data[features])

# b. Model clustering baseline (semua fitur)
kmeans_base = KMeans(n_clusters=2, random_state=42)
customer_data['Cluster_Base'] = kmeans_base.fit_predict(X)
silhouette_base = silhouette_score(X, customer_data['Cluster_Base'])
print(f"\nSilhouette Score (Baseline - Semua Fitur): {silhouette_base:.3f}")

# c. Feature Selection
selector = SelectKBest(score_func=f_classif, k=4)  # Memilih 4 fitur terbaik
X_selected = selector.fit_transform(X, customer_data['Cluster_Base'])
selected_features_mask = selector.get_support()
selected_features = np.array(features)[selected_features_mask]
print("Fitur yang dipilih:", selected_features)

# d. Model clustering dengan fitur terpilih
kmeans_selected = KMeans(n_clusters=2, random_state=42)
customer_data['Cluster_Selected'] = kmeans_selected.fit_predict(X_selected)
silhouette_selected = silhouette_score(X_selected, customer_data['Cluster_Selected'])
print(f"Silhouette Score (Setelah Feature Selection): {silhouette_selected:.3f}")

# e. Menentukan jumlah cluster optimal (Elbow Method)
visualizer = KElbowVisualizer(KMeans(random_state=42), k=(1, 10))
visualizer.fit(X_selected)
visualizer.show()

# f. Labeling cluster
centers = kmeans_selected.cluster_centers_
if centers[0][0] < centers[1][0]:  # Berdasarkan TotalSpend yang dinormalisasi
    customer_data['Label'] = customer_data['Cluster_Selected'].map({0: 'Low Spender', 1: 'High Spender'})
else:
    customer_data['Label'] = customer_data['Cluster_Selected'].map({0: 'High Spender', 1: 'Low Spender'})

# g. Visualisasi Hasil Clustering
plt.figure(figsize=(12, 6))
plt.subplot(1, 2, 1)
sns.scatterplot(data=customer_data, x=selected_features[0], y='TotalSpend', hue='Label', palette='deep')
plt.title(f'{selected_features[0]} vs TotalSpend')

plt.subplot(1, 2, 2)
sns.scatterplot(data=customer_data, x=selected_features[1], y='TotalSpend', hue='Label', palette='deep')
plt.title(f'{selected_features[1]} vs TotalSpend')
plt.tight_layout()
plt.show()

# h. Analisis dan Interpretasi Hasil Cluster
print("\nStatistik per Label (K-Means dengan Feature Selection):")
print(customer_data.groupby('Label')[features].describe())

print("\nInterpretasi Hasil Clustering:")
for label in ['Low Spender', 'High Spender']:
    stats = customer_data[customer_data['Label'] == label][features].mean()
    print(f"\n{label}:")
    for feature in features:
        print(f"- Rata-rata {feature}: {stats[feature]:.2f}")
    print(f"- Analisis: {'Pelanggan dengan pengeluaran rendah, cenderung membeli dalam jumlah kecil atau produk murah.' if label == 'Low Spender' else 'Pelanggan premium dengan pengeluaran tinggi, mungkin sering membeli dalam jumlah besar atau produk mahal.'}")

# i. Perbandingan Silhouette Score
print("\nPerbandingan Silhouette Score:")
print(f"Baseline (6 fitur): {silhouette_base:.3f}")
print(f"Dengan Feature Selection (4 fitur): {silhouette_selected:.3f}")
print(f"Perubahan: {(silhouette_selected - silhouette_base):.3f}")

# **7. Mengeksport Data**
customer_data.to_csv('customer_clusters_with_selection.csv', index=False)
print("\nData telah dieksport ke 'customer_clusters_with_selection.csv'")